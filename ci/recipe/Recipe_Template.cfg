[Main]
# Main section. Required. This sets global properties on the recipe and specifies when this recipe is triggered.

# build_user: The user that will be running CIVET client.
build_user = moosebuild
# repository: The repository on which CIVET will listen for events to trigger this recipe
repository = git@github.com:idaholab/moose
# name: name of the recipe. Used for a more descriptive name that is shown on the user's recipe page
name = Moose Tutorial
# display_name: A shorter name that will be displayed for CIVET jobs
display_name = Tutorial
# help: Some help text describing what this recipe does
help = Builds and runs the MOOSE tutorial
# active: Bool. If False then this recipe won't be triggered
active = True
# private: Bool. If True then the results of this recipe are only viewable by collaborators.
private = False
# trigger_push: Bool. If True then this recipe will be triggered on a push to the branch specified in trigger_push_branch
trigger_push = True
# trigger_push_branch: Branch name to trigger on push
trigger_push_branch = master
# priority_push: Priority for this recipe when it is triggered by a push. Priority determines in what order jobs are run.
priority_push = 3
# automatic: One of "manual", "automatic", or "authorized".
#         "manual": The job will have to be manually activated by a collaborator before it can be run
#         "automatic": The job automatically is scheduled to run (when dependencies are set)
#         "authorized": The job automatically is scheduled to run if the initiated user is a collaborator
automatic = authorized
# build_configs: A list of configurations that this recipe should be run against. See pyrecipe/RecipeReader.py for a list of allowed configs.
build_configs = linux-gnu
# allow_on_pr: If True then a user can select this recipe to be run on a pull request (if it isn't already triggered on a PR)
allow_on_pr = True
# trigger_pull_request: If True then this recipe is triggered on pull requests
trigger_pull_request = True
# priority_pull_request: Priority for this recipe when it is triggered by a pull request. Priority determines in what order jobs are run.
priority_pull_request = 53

# trigger_manual: Bool. If True then this recipe will be triggered via a manual event.
#       This is typically used via cron that does a simple post to a URL to trigger this event.
#       You will also need to specify trigger_manual_branch to specify what branch this will happen on.
#       The latest SHA on that branch will be what this recipe operates on.
trigger_manual = True
# trigger_manual_branch: The branch to operate on a manual event
trigger_manual_branch = master
# priorty_manual: The priority a manual job runs with.
priority_manual = 0

#Scheduler
scheduler = ""

[PullRequest Dependencies]
# Section for dependencies on pull requests. Optional. Specify the filename to the recipe.
# The key value can be anything, they just have to be unique.
filename0 = recipes/moosebuild/moose/Precheck.cfg

[Push Dependencies]
# Section for dependencies on pushes. Optional. Specify the filename to the recipe.
# The key value can be anything, they just have to be unique.
filename0 = recipes/moosebuild/moose/Precheck.cfg

[Global Sources]
# Section for scripts that will be sourced before every script in a step is run. Optional.
# Specify the filename to the script.
# The key value can be anything, they just have to be unique.
filename0 = scripts/env.sh

[Global Environment]
# Section for global environment. These key value pairs will be put into the environment
# and all steps will have access to them.
METHODS = opt
METHOD = opt
# For most scripts APPLICATION_REPO needs to be set as that is where they determine
# what directory and repo to operator on.
APPLICATION_REPO = git@github.com:idaholab/moose

# The remaining sections are all steps. Each of these sections must have a unique name.
[Step 0]
# script: The script to run for this step
script = scripts/fetch_and_branch.sh
# abort_on_failure: Bool. If True then if this step fails then no further steps will be run.
abort_on_failure = True
# allowed_to_fail: Bool. If True then if this step fails it will be marked as "allowed to fail"
allowed_to_fail = False
# Any key value pairs in a step section will be put into the environment for that step.
# This includes the "abort_on_failure", "allowed_to_fail", and "script".
ENV_VAR = VALUE
